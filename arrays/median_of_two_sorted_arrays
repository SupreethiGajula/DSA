// Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

// The overall run time complexity should be O(log (m+n)).

 

// Example 1:

// Input: nums1 = [1,3], nums2 = [2]
// Output: 2.00000
// Explanation: merged array = [1,2,3] and median is 2.
// Example 2:

// Input: nums1 = [1,2], nums2 = [3,4]
// Output: 2.50000
// Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.



//SOLUTION:

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> nums3;
        double median = 0.00000;
        for(int i:nums1){
            nums3.push_back(i);
        }
        for(int j:nums2){
            nums3.push_back(j);
        }
        sort(nums3.begin(),nums3.end());

        int size = nums3.size();

        if(size % 2 == 0){
            int mid1 = size / 2 - 1;
            int mid2 = size / 2;
            median += (nums3[mid1] + nums3[mid2]) / 2.0; 
        }
        else{
            int mid = size / 2;
            median += nums3[mid];
        }
        return median;
    }    
};

